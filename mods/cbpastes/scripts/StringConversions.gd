extends Reference

# converts them to a form matching resource names

const MOVE_NAME_CONVERSIONS: Dictionary = {
	"<empty_slot>": "_empty_slot",
	"empty_slot": "_empty_slot",
	"empty_slot_-": "_empty_slot",
	"empty_slot-": "_empty_slot",
	"<_empty_slot_>": "_empty_slot",
	"-empty_slot-": "_empty_slot",
	"-_empty_slot_-": "_empty_slot",
	"emptyslot": "_empty_slot",
	"be_random!": "be_random",
	"be_random!!": "be_random",
	"be_random!!!": "be_random",
	"bish_bash_bosh": "bishbashbosh",
	"bush_fire": "bushfire",
	"clock_work_mouse": "clockwork_mouse",
	"cm": "critical_mass",
	"complement": "compliment",
	"copy_cat": "copycat",
	"copythat": "copy_that",
	"cottoned_on": "cotton_on",
	"crit_ap": "critical_ap",
	"criticise": "criticize",
	"cs": "custom_starter",
	"deja_vu": "dejavu",
	"de_ja_vu": "dejavu",
	"djinn_toxicate": "djinntoxicate",
	"echolocate": "echolocation",
	"gem_stone_wall": "gemstone_wall",
	"hypnotise": "hypnotize",
	"ionized_air": "ionised_air",
	"iron_fillings": "iron_filings",
	"jagged_edges": "jagged_edge",
	"jumpscare": "jump_scare",
	"life_absorb": "hp_absorb",
	"lift_off": "liftoff",
	"mc": "machine_curse",
	"multi_copy": "multicopy",
	"multishot": "multi_shot",
	"multismack": "multi_smack",
	"neutralize": "neutralise",
	"polevault_assault": "pole_vault_assault",
	"pre_emptive_strike": "preemptive_strike",
	"qs": "quick_smack",
	"rs": "random_starter",
	"rf": "rapid_fire",
	"sand_storm": "sandstorm",
	"selfdestruct": "self_destruct",
	"sharp_edge": "sharp_edges",
	"sheer_luck": "starter2_passive",
	"shear_luck": "starter2_passive",
	"spring_loaded": "spring_load",
	"sitd": "stab_in_the_dark",
	"status_res": "status_resistance",
	"bonbon_blast": "starter1_attack",
	"bon_bon_blast": "starter1_attack",
	"battering_ram": "starter2_attack",
	"sugar_rush": "starter1_passive",
	"super_heated_fist": "superheated_fist",
	"sturdy_armor": "sturdy_armour",
	"old_1-2": "the_old_1_2",
	"old_1_2": "the_old_1_2",
	"trapjaw": "trap_jaw",
	"trip_wire": "tripwire",
	"twoheads": "two_heads",
	"tower_defense": "tower_defence",
	"water_works": "waterworks",
	"wonderful_seven": "wonderful_7",
	"w7": "wonderful_7",
	"wood_cutter": "woodcutter",

	"air_camouflage"		: "camouflage_air",
	"air_camo"				: "camouflage_air",
	"astral_camouflage"		: "camouflage_astral",
	"astral_camo"			: "camouflage_astral",
	"beast_camouflage"		: "camouflage_beast",
	"beast_camo"			: "camouflage_beast",
	"earth_camouflage"		: "camouflage_earth",
	"earth_camo"			: "camouflage_earth",
	"fire_camouflage"		: "camouflage_fire",
	"fire_camo"				: "camouflage_fire",
	"glass_camouflage"		: "camouflage_glass",
	"glass_camo"			: "camouflage_glass",
	"ice_camouflage"		: "camouflage_ice",
	"ice_camo"				: "camouflage_ice",
	"lightning_camouflage"	: "camouflage_lightning",
	"lightning_camo"		: "camouflage_lightning",
	"metal_camouflage"		: "camouflage_metal",
	"metal_camo"			: "camouflage_metal",
	"plant_camouflage"		: "camouflage_plant",
	"plant_camo"			: "camouflage_plant",
	"plastic_camouflage"	: "camouflage_plastic",
	"plastic_camo"			: "camouflage_plastic",
	"poison_camouflage"		: "camouflage:poison",
	"poison_camo"			: "camouflage:poison",
	"water_camouflage"		: "camouflage:water",
	"water_camo"			: "camouflage:water",	

	"air_coating"		: "coating_air",
	"astral_coating"	: "coating_astral",
	"beast_coating"		: "coating_beast",
	"earth_coating"		: "coating_earth",
	"elemental_coating"	: "coating_elemental",
	"fire_coating"		: "coating_fire",
	"glass_coating"		: "coating_glass",
	"ice_coating"		: "coating_ice",
	"lightning_coating"	: "coating_lightning",
	"metal_coating"		: "coating_metal",
	"plant_coating"		: "coating_plant",
	"plastic_coating"	: "coating_plastic",
	"poison_coating"	: "coating_poison",
	"water_coating"		: "coating_water",

	"air_resistance"		: "resistance_air",
	"astral_resistance"		: "resistance_astral",
	"beast_resistance"		: "resistance_beast",
	"earth_resistance"		: "resistance_earth",
	"fire_resistance"		: "resistance_fire",
	"fireproof"				: "resistance_fire",
	"fire_proof"			: "resistance_fire",
	"glass_resistance"		: "resistance_glass",
	"glitter_resistance"	: "resistance_glitter",
	"ice_resistance"		: "resistance_ice",
	"lightning_resistance"	: "resistance_lightning",
	"grounded"				: "resistance_lightning",
	"metal_resistance"		: "resistance_metal",
	"plant_resistance"		: "resistance_plant",
	"plastic_resistance"	: "resistance_plastic",
	"poison_resistance"		: "resistance_poison",
	"water_resistance"		: "resistance_water",
	"waterproof"			: "resistance_water",
	"water_proof"			: "resistance_water",
}

const ATTRIBUTES: Dictionary = {
	"alt": {
		"maxhp": preload("res://data/sticker_attributes/alt_attack_max_hp.tres"),
		"matk": preload("res://data/sticker_attributes/alt_attack_matk.tres"),
		"mdef": preload("res://data/sticker_attributes/alt_attack_mdef.tres"),
		"ratk": preload("res://data/sticker_attributes/alt_attack_ratk.tres"),
		"rdef": preload("res://data/sticker_attributes/alt_attack_rdef.tres"),
		"speed": preload("res://data/sticker_attributes/alt_attack_speed.tres")
		},
	"+hit": preload("res://data/sticker_attributes/extra_hit.tres"),
	"+duration": preload("res://data/sticker_attributes/status_duration_boost.tres"),
	"+slot": preload("res://data/sticker_attributes/extra_slot.tres"),
	"heal": {
		"regular": preload("res://data/sticker_attributes/heal.tres"),
		"empty": preload("res://data/sticker_attributes/specialization_heal.tres"),
		},
	"damage": {
		"regular": preload("res://data/sticker_attributes/stat_damage.tres"),
		"empty": preload("res://data/sticker_attributes/specialization_damage.tres"),
		},
	"exp": {
		"regular": preload("res://data/sticker_attributes/stat_exp.tres"),
		"empty": preload("res://data/sticker_attributes/specialization_exp.tres"),
		},
	"critdamage": {
		"regular": preload("res://data/sticker_attributes/stat_move_crit_damage.tres"),
		"empty": preload("res://data/sticker_attributes/specialization_move_crit_damage.tres")
		},
	"critchance": {
		"regular": preload("res://data/sticker_attributes/stat_move_crit_rate.tres"),
		"empty": preload("res://data/sticker_attributes/specialization_move_crit_rate.tres"),
		},
	"moveacc": {
		"regular": preload("res://data/sticker_attributes/stat_move_accuracy.tres"),
		"empty": preload("res://data/sticker_attributes/stat_move_accuracy.tres"),
		},
	"effectchance": {
		"regular": preload("res://data/sticker_attributes/stat_move_effect_chance.tres"),
		"empty": preload("res://data/sticker_attributes/specialization_move_effect_chance.tres"),
		},
	"splash": {
		"regular": preload("res://data/sticker_attributes/stat_move_splash_damage.tres"),
		"empty": preload("res://data/sticker_attributes/specialization_move_splash_damage.tres"),
		},
	"priority": {
		"regular": preload("res://data/sticker_attributes/stat_priority_chance.tres"),
		"empty": preload("res://data/sticker_attributes/specialization_priority_chance.tres"),
		},
	"critadvantage": preload("res://data/sticker_attributes/type_advantage_crit.tres"),
	"refund1ap": preload("res://data/sticker_attributes/ap_refund_1.tres"),
	"refundallap": preload("res://data/sticker_attributes/ap_refund_all.tres"),
	"autouse": {
		"smack": preload("res://data/sticker_attributes/attack_after_use_smack.tres"),
		"spit": preload("res://data/sticker_attributes/attack_after_use_spit.tres"),
		"start": preload("res://data/sticker_attributes/auto_use_battle_start.tres"),
		"end": preload("res://data/sticker_attributes/auto_use_round_ending.tres"),
		"attack": preload("res://data/sticker_attributes/auto_use_user_attack.tres"),
		"hit": preload("res://data/sticker_attributes/auto_use_user_hit.tres"),
		"twice": preload("res://data/sticker_attributes/use_again.tres"),
		"random": preload("res://data/sticker_attributes/use_random.tres"),
		},
	"buff": preload("res://data/sticker_attributes/buff_user.tres"),
	"debuff": preload("res://data/sticker_attributes/debuff_target.tres"),
	"wall": preload("res://data/sticker_attributes/buff_user_wall.tres"),
	"contactdmg": preload("res://data/sticker_attributes/buff_user_contactdmg.tres"),
	"allcompat": preload("res://data/sticker_attributes/compatibility.tres"),
	"destroyswalls": preload("res://data/sticker_attributes/destroys_walls.tres"),
	"ignoreswalls": preload("res://data/sticker_attributes/ignores_walls.tres"),
	"targetteam": preload("res://data/sticker_attributes/multitarget.tres"),
	"shared": preload("res://data/sticker_attributes/shared.tres"),
	"passive": {
		"maxhp": {
			"regular": preload("res://data/sticker_attributes/stat_passive_max_hp.tres"),
			"empty": preload("res://data/sticker_attributes/specialization_passive_max_hp.tres"),
			},
		"matk": {
			"regular": preload("res://data/sticker_attributes/stat_passive_melee_attack.tres"),
			"empty": preload("res://data/sticker_attributes/specialization_passive_melee_attack.tres"),
			},
		"mdef": {
			"regular": preload("res://data/sticker_attributes/stat_passive_melee_defense.tres"),
			"empty": preload("res://data/sticker_attributes/specialization_passive_melee_defense.tres"),
			},
		"ratk": {
			"regular": preload("res://data/sticker_attributes/stat_passive_ranged_attack.tres"),
			"empty": preload("res://data/sticker_attributes/specialization_passive_ranged_attack.tres"),
			},
		"rdef": {
			"regular": preload("res://data/sticker_attributes/stat_passive_ranged_defense.tres"),
			"empty": preload("res://data/sticker_attributes/specialization_passive_ranged_defense.tres"),
			},
		"speed": {
			"regular": preload("res://data/sticker_attributes/stat_passive_speed.tres"),
			"empty": preload("res://data/sticker_attributes/specialization_passive_speed.tres"),
			},
		"acc": {
			"regular": preload("res://data/sticker_attributes/stat_passive_accuracy.tres"),
			"empty": preload("res://data/sticker_attributes/specialization_passive_accuracy.tres"),
			},
		"evas": {
			"regular": preload("res://data/sticker_attributes/stat_passive_evasion.tres"),
			"empty": preload("res://data/sticker_attributes/specialization_passive_evasion.tres"),
			},
	},
}


const ATTRIBUTE_NAME_CONVERSIONS: Dictionary = {
	"dmg": "damage",
	"experience": "exp",
	"criticaldamage": "critdamage",
	"criticaldmg": "critdamage",
	"critdmg": "critdamage",
	"critrate": "critchance",
	"accuracy": "moveacc",
	"moveaccuracy": "moveacc",
	"acc": "moveacc",
	"effect": "effectchance",
	"extrahit": "+hit",
	"1hit": "+hit",
	"extraslot": "+slot",
	"1slot": "+slot",
	"prio": "priority",
	"prioritychance": "priority",
	"crittypeadvantage": "critadvantage",
	"typeadvantage": "critadvantage",
	"typeadvantagecrit": "critadvantage",
	"refundone": "refund1ap",
	"refund1": "refund1ap",
	"refundall": "refundallap",
	"buffuser": "buff",
	"debufftarget": "debuff",
	"contactdamage": "contactdmg",
	"allcompatible": "allcompat",
	"anycompatible": "allcompat",
	"anycompat": "allcompat",
	"compat": "allcompat",
	"compatall": "allcompat",
	"compatany": "allcompat",
	"compatibility": "allcompat",
	"destroywalls": "destroyswalls",
	"ignorewalls": "ignoreswalls",
	"multitarget": "targetteam",
	"sharedwithallies": "shared",
}

const MODIFIER_CONVERSIONS: Dictionary = {
	"meleeattack": "matk",
	"meleedefense": "mdef",
	"meleedefence": "mdef",
	"rangedattack": "ratk",
	"rangeddefense": "rdef",
	"rangeddefence": "rdef",
	"spd": "speed",
	"spee": "speed",
	"accuracy": "acc",
	"evasion": "evas",
	"eva": "evas",
	"battlestart": "start",
	"startbattle": "start",
	"startbattles": "start",
	"startofbattle": "start",
	"startofbattles": "start",
	"endofround": "end",
	"endofrounds": "end",
	"endround": "end",
	"endrounds": "end",
	"roundending": "end",
	"roundend": "end",
	"afterattacks": "attack",
	"attacks": "attack",
	"userattack": "attack",
	"userhit": "hit",
	"whenhit": "hit",
	"useagain": "twice",
	"again": "twice",
	"userandom": "random",
	"userandommove": "random",
}

# excludes specialization_ and stat_ to filter out later
# converts internal name files into key modifier combos
const ATTRIBUTE_TO_KEYS: Dictionary = {
	"alt_attack_max_hp": {"key": "Alt", "modifier": "MaxHP"},
	"alt_attack_matk": {"key": "Alt", "modifier": "MAtk"},
	"alt_attack_mdef": {"key": "Alt", "modifier": "MDef"},
	"alt_attack_ratk": {"key": "Alt", "modifier": "RAtk"},
	"alt_attack_rdef": {"key": "Alt", "modifier": "RDef"},
	"alt_attack_speed": {"key": "Alt", "modifier": "Speed"},
	"ap_refund_1": {"key": "Refund1AP"},
	"ap_refund_all": {"key": "RefundAllAP"},
	"attack_after_use_smack": {"key": "AutoUse", "modifier": "Smack"},
	"attack_after_use_spit": {"key": "AutoUse", "modifier": "Spit"},
	"auto_use_battle_start": {"key": "AutoUse", "modifier": "Start"},
	"auto_use_round_ending": {"key": "AutoUse", "modifier": "End"},
	"auto_use_user_attack": {"key": "AutoUse", "modifier": "Attack"},
	"auto_use_user_hit": {"key": "AutoUse", "modifier": "Hit"},
	"buff_user": {"key": "Buff"},
	"buff_user_contactdmg": {"key": "ContactDmg"},
	"buff_user_wall": {"key": "Wall"},
	"compatibility": {"key": "AllCompat"},
	"debuff_target": {"key": "Debuff"},
	"destroys_walls": {"key": "DestroysWalls"},
	"extra_hit": {"key": "+Hit"},
	"extra_slot": {"key": "+Slot"},
	"heal": {"key": "Heal"},
	"ignores_walls": {"key": "IgnoresWalls"},
	"multitarget": {"key": "TargetTeam"},
	"shared": {"key": "Shared"},
	"status_duration_boost": {"key": "+Duration"},
	"damage": {"key": "Damage"},
	"exp": {"key": "Damage"},
	"move_accuracy": {"key": "MoveAcc"},
	"move_crit_damage": {"key": "CritDamage"},
	"move_crit_rate": {"key": "CritChance"},
	"move_effect_chance": {"key": "EffectChance"},
	"move_splash_damage": {"key": "Splash"},
	"passive_accuracy": {"key": "Passive", "modifier": "Acc"},
	"passive_evasion": {"key": "Passive", "modifier": "Evas"},
	"passive_max_hp": {"key": "Passive", "modifier": "MaxHP"},
	"passive_melee_attack": {"key": "Passive", "modifier": "MAtk"},
	"passive_melee_defense": {"key": "Passive", "modifier": "MDef"},
	"passive_ranged_attack": {"key": "Passive", "modifier": "RAtk"},
	"passive_ranged_defense": {"key": "Passive", "modifier": "RDef"},
	"passive_speed": {"key": "Passive", "modifier": "Speed"},
	"priority_chance": {"key": "Priority"},
	"type_advantage_crit": {"key": "CritAdvantage"},
	"use_again": {"key": "AutoUse", "modifier": "Twice"},
	"use_random": {"key": "AutoUse", "modifier": "Random"},
}


const STATUSES: Dictionary = {
	"cottonedon": preload("res://data/status_effects/cottoned_on.tres"),
	"parrystance": preload("res://data/status_effects/parry_stance.tres"),
	"lockedon": preload("res://data/status_effects/locked_on.tres"),
	"multistrike": preload("res://data/status_effects/multistrike.tres"),
	"accup": preload("res://data/status_effects/stat_accuracy_up.tres"),
	"evasup": preload("res://data/status_effects/stat_evasion_up.tres"),
	"matkup": preload("res://data/status_effects/stat_matk_up.tres"),
	"mdefup": preload("res://data/status_effects/stat_mdef_up.tres"),
	"ratkup": preload("res://data/status_effects/stat_ratk_up.tres"),
	"rdefup": preload("res://data/status_effects/stat_rdef_up.tres"),
	"speedup": preload("res://data/status_effects/stat_speed_up.tres"),
	"apboost": preload("res://data/status_effects/ap_boost.tres"),
	"multitarget": preload("res://data/status_effects/multitarget.tres"),
	"healingleaf": preload("res://data/status_effects/healing_leaf.tres"),
	"healingsteam": preload("res://data/status_effects/healing_steam.tres"),
	"mindmeld": preload("res://data/status_effects/mind_meld.tres"),
	"bomb": preload("res://data/status_effects/bomb.tres"),
	"flinch": preload("res://data/status_effects/flinch.tres"),
	"resonance": preload("res://data/status_effects/resonance.tres"),
	"confused": preload("res://data/status_effects/confused.tres"),
	"glassbonds": preload("res://data/status_effects/glass_bonds.tres"),
	"leeched": preload("res://data/status_effects/leeched.tres"),
	"poisoned": preload("res://data/status_effects/poisoned.tres"),
	"shrapnel": preload("res://data/status_effects/shrapnel.tres"),
	"sleep": preload("res://data/status_effects/sleep.tres"),
	"accdown": preload("res://data/status_effects/stat_accuracy_down.tres"),
	"evasdown": preload("res://data/status_effects/stat_evasion_down.tres"),
	"matkdown": preload("res://data/status_effects/stat_matk_down.tres"),
	"mdefdown": preload("res://data/status_effects/stat_mdef_down.tres"),
	"ratkdown": preload("res://data/status_effects/stat_ratk_down.tres"),
	"rdefdown": preload("res://data/status_effects/stat_rdef_down.tres"),
	"speeddown": preload("res://data/status_effects/stat_speed_down.tres"),
	"berserk": preload("res://data/status_effects/berserk.tres"),
	"apdrain": preload("res://data/status_effects/ap_drain.tres"),
	"burned": preload("res://data/status_effects/burned.tres"),
	"conductive": preload("res://data/status_effects/conductive.tres"),
	"petrified": preload("res://data/status_effects/petrified.tres"),
	"unitarget": preload("res://data/status_effects/unitarget.tres"),
}

const STATUS_CONVERSIONS: Dictionary = {
	"cottonon": "cottonedon",
	"accuracyup": "accup",
	"evasionup": "evasup",
	"evaup": "evasup",
	"meleeattackup": "matkup",	
	"meleedefenseup": "mdefup",
	"meleedefenceup": "mdefup",
	"rangedattackup": "ratkup",
	"rangeddefenseup": "rdefup",
	"rangeddefenceup": "rdefup",
	"spdup": "speedup",
	"speup": "speup",
	"docleaf": "healingleaf",
	"mind-meld": "mindmeld",
	"mind_meld": "mindmeld",
	"bombed": "bomb",
	"hotpotato": "bomb",
	"flinched": "flinch",
	"confuse": "confused",
	"confusion": "confused",
	"leech": "leeched",
	"poison": "poisoned",
	"accuracydown": "accdown",
	"evasiondown": "evasdown",
	"evadown": "evasdown",
	"meleeattackdown": "matkdown",
	"meleedefensedown": "mdefdown",
	"meleedefencedown": "mdefdown",
	"rangedattackdown": "ratkdown",
	"rangeddefensedown": "rdefdown",
	"rangeddefencedown": "rdefdown",
	"spddown": "speeddown",
	"spedown": "speeddown",
	"berserked": "berserk",
	"burn": "burned",
	"petrify": "petrified",
}

# converts actual status names into contractions if present
# note that dashes and spaces are handled automatically
const STATUS_CONTRACTIONS: Dictionary = {
	"Melee Attack Up": "MAtkUp",
	"Melee Defence Up": "MDefUp",
	"Ranged Attack Up": "RAtkUp",
	"Ranged Defence Up": "RDefUp",
	"Accuracy Up": "AccUp",
	"Evasion Up": "EvasUp",
	"Melee Attack Down": "MAtkDown",
	"Melee Defence Down": "MDefDown",
	"Ranged Attack Down": "RAtkDown",
	"Ranged Defence Down": "RDefDown",
	"Accuracy Down": "AccDown",
	"Evasion Down": "EvasDown",
}
